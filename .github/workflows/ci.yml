name: CI

on:
  push:
    branches:
      - master
    tags:
      - v*
  pull_request:
  workflow_dispatch:

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.platform }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: macos-latest
            pytest-version: '7.1.2'
            blender-version: '3.1.2'
            python-version: '3.10'
          - platform: macos-latest
            pytest-version: '7.1.2'
            blender-version: '3.6.9'
            python-version: '3.10'
          - platform: macos-latest
            pytest-version: '7.4.0'
            blender-version: '3.6.9'
            python-version: '3.12'
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python v${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
      - name: Upgrade PIP
        run: python -m pip install --upgrade pip
      - name: Cache Blender ${{ matrix.blender-version }}
        uses: actions/cache@v3
        id: cache-blender
        with:
          path: |
            blender-*
            _blender-executable-path.txt
          key: ${{ runner.os }}-${{ matrix.blender-version }}
      # Download Blender on Linux and MacOS
      - name: Download Blender ${{ matrix.blender-version }}
        if: |
          steps.cache-blender.outputs.cache-hit != 'true' &&
          runner.os != 'Windows'
        run: |
          set -x
          python -m pip install --upgrade blender-downloader
          python -m pip list
          printf "%s" "$(blender-downloader ${{ matrix.blender-version }} --extract --remove-compressed --print-blender-executable --quiet)" > _blender-executable-path.txt
          cat _blender-executable-path.txt
      # Download Blender on Windows
      - name: Download Blender ${{ matrix.blender-version }}
        if: |
          steps.cache-blender.outputs.cache-hit != 'true' &&
          runner.os == 'Windows'
        run: |
          Set-PSDebug -Trace 2
          python -m pip install --upgrade blender-downloader
          python -m pip list
          blender-downloader ${{ matrix.blender-version }} --extract --remove-compressed --print-blender-executable --quiet | Out-File -FilePath _blender-executable-path.txt
          get-content _blender-executable-path.txt
      # Install dependencies on Unix-based systems
      - name: Install dependencies
        if: runner.os != 'Windows'
        id: install-dependencies-unix
        run: |
          set -x
          python -m pip install .[test] pytest==${{ matrix.pytest-version }}
          BLENDER_EXECUTABLE="$(< _blender-executable-path.txt)"
          echo "BLENDER_EXECUTABLE: $BLENDER_EXECUTABLE"
          pytest-blender --blender-executable "$BLENDER_EXECUTABLE"
          PYTHON_BLENDER_EXECUTABLE="$(pytest-blender --blender-executable $BLENDER_EXECUTABLE)"
          echo "PYTHON_BLENDER_EXECUTABLE: $PYTHON_BLENDER_EXECUTABLE"
          $PYTHON_BLENDER_EXECUTABLE -m ensurepip
          $PYTHON_BLENDER_EXECUTABLE -m pip install pytest==${{ matrix.pytest-version }} pytest-cov
          echo "blender-executable=$BLENDER_EXECUTABLE" >> $GITHUB_OUTPUT

      # Install dependencies on Windows
      - name: Install dependencies
        if: runner.os == 'Windows'
        id: install-dependencies-windows
        run: |
          Set-PSDebug -Trace 2
          python -m pip install .[test] pytest==${{ matrix.pytest-version }}
          $BLENDER_EXECUTABLE = get-content _blender-executable-path.txt
          echo "BLENDER_EXECUTABLE: $BLENDER_EXECUTABLE"
          pytest-blender --blender-executable $(Get-Variable -Name BLENDER_EXECUTABLE -ValueOnly)
          $PYTHON_BLENDER_EXECUTABLE = pytest-blender --blender-executable "$(Get-Variable -Name BLENDER_EXECUTABLE -ValueOnly)"
          echo "PYTHON_BLENDER_EXECUTABLE: $PYTHON_BLENDER_EXECUTABLE"
          Invoke-Expression "$PYTHON_BLENDER_EXECUTABLE -m pip install pytest==${{ matrix.pytest-version }} pytest-cov"
          echo "blender-executable=$BLENDER_EXECUTABLE" >> $env:GITHUB_OUTPUT
      - name: Unit tests
        if: runner.os != 'Windows'
        run: pytest -svv --strict-config --strict-markers tests
        env:
          BLENDER_EXECUTABLE: ${{ steps.install-dependencies-unix.outputs.blender-executable }}
      - name: Unit tests
        if: runner.os == 'Windows'
        # Created empty pytest.ini file to avoid the reading of setup.cfg
        # because there is a problem with encoding on Windows, see:
        # https://github.com/pytest-dev/pytest/issues/4441
        #
        # Note that pytest.ini will always take precedence, even if empty, see:
        # https://docs.pytest.org/en/7.1.x/reference/customize.html#finding-the-rootdir
        run: |
          New-Item -Path 'pytest.ini' -ItemType File
          pytest -svv -p no:pytest-blender -p pytester --strict-config --strict-markers tests
        env:
          BLENDER_EXECUTABLE: ${{ steps.install-dependencies-windows.outputs.blender-executable }}
      - name: Integration tests
        if: runner.os != 'Windows'
        run: sh tests/integration.sh
        env:
          BLENDER_EXECUTABLE: ${{ steps.install-dependencies-unix.outputs.blender-executable }}
      # TODO: integration tests on Windows?
